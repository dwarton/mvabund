// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// RtoAnovaCpp
List RtoAnovaCpp(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& isXvarIn, Rcpp::Nullable<RcppGSL::Matrix>& bID);
RcppExport SEXP _mvabundtest_RtoAnovaCpp(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP isXvarInSEXP, SEXP bIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type isXvarIn(isXvarInSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
    rcpp_result_gen = Rcpp::wrap(RtoAnovaCpp(rparam, Y, X, isXvarIn, bID));
    return rcpp_result_gen;
END_RCPP
}
// RtoGlmAnova
List RtoGlmAnova(const List& sparam, const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O, RcppGSL::Matrix& B, RcppGSL::Matrix& isXvarIn, Rcpp::Nullable<RcppGSL::Matrix>& bID, RcppGSL::Vector& lambda);
RcppExport SEXP _mvabundtest_RtoGlmAnova(SEXP sparamSEXP, SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP BSEXP, SEXP isXvarInSEXP, SEXP bIDSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type sparam(sparamSEXP);
    Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type O(OSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type B(BSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type isXvarIn(isXvarInSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(RtoGlmAnova(sparam, rparam, Y, X, O, B, isXvarIn, bID, lambda));
    return rcpp_result_gen;
END_RCPP
}
// RtoGlm
List RtoGlm(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O);
RcppExport SEXP _mvabundtest_RtoGlm(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type O(OSEXP);
    rcpp_result_gen = Rcpp::wrap(RtoGlm(rparam, Y, X, O));
    return rcpp_result_gen;
END_RCPP
}
// RtoGlmSmry
List RtoGlmSmry(const List& sparam, const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, RcppGSL::Matrix& O, Rcpp::Nullable<RcppGSL::Matrix>& bID, RcppGSL::Vector& lambda);
RcppExport SEXP _mvabundtest_RtoGlmSmry(SEXP sparamSEXP, SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP OSEXP, SEXP bIDSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type sparam(sparamSEXP);
    Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type O(OSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Vector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(RtoGlmSmry(sparam, rparam, Y, X, O, bID, lambda));
    return rcpp_result_gen;
END_RCPP
}
// RtoSmryCpp
List RtoSmryCpp(const List& rparam, RcppGSL::Matrix& Y, RcppGSL::Matrix& X, Rcpp::Nullable<RcppGSL::Matrix>& bID);
RcppExport SEXP _mvabundtest_RtoSmryCpp(SEXP rparamSEXP, SEXP YSEXP, SEXP XSEXP, SEXP bIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type rparam(rparamSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< RcppGSL::Matrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<RcppGSL::Matrix>& >::type bID(bIDSEXP);
    rcpp_result_gen = Rcpp::wrap(RtoSmryCpp(rparam, Y, X, bID));
    return rcpp_result_gen;
END_RCPP
}
// start_profiler
SEXP start_profiler(SEXP str);
RcppExport SEXP _mvabundtest_start_profiler(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(start_profiler(str));
    return rcpp_result_gen;
END_RCPP
}
// stop_profiler
SEXP stop_profiler();
RcppExport SEXP _mvabundtest_stop_profiler() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stop_profiler());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvabundtest_RtoAnovaCpp", (DL_FUNC) &_mvabundtest_RtoAnovaCpp, 5},
    {"_mvabundtest_RtoGlmAnova", (DL_FUNC) &_mvabundtest_RtoGlmAnova, 9},
    {"_mvabundtest_RtoGlm", (DL_FUNC) &_mvabundtest_RtoGlm, 4},
    {"_mvabundtest_RtoGlmSmry", (DL_FUNC) &_mvabundtest_RtoGlmSmry, 7},
    {"_mvabundtest_RtoSmryCpp", (DL_FUNC) &_mvabundtest_RtoSmryCpp, 4},
    {"_mvabundtest_start_profiler", (DL_FUNC) &_mvabundtest_start_profiler, 1},
    {"_mvabundtest_stop_profiler", (DL_FUNC) &_mvabundtest_stop_profiler, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvabundtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
